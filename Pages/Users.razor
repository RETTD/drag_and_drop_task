@page "/users"
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JS

<MudDropContainer T="UserItem" @ref="_dropContainer" Items="@_users"
    ItemsSelector="@((item,column) => item.Status == column)" ItemDropped="UserUpdated" Class="d-flex flex-row">
    <ChildContent>
        <MudPaper Elevation="0" Width="698px" MinHeight="887px"
            Style="border: 1px solid grey; border-radius: 4px; background: radial-gradient(97.57% 210.75% at 0.9% 2.98%, rgba(255, 255, 255, 0.4) 0%, rgba(255, 255, 255, 0) 100%);"
            Class="pa-4 ma-4 d-flex flex-column rounded-lg">
            <MudToolBar DisableGutters="true">
                <MudText style="color: white;" Typo="Typo.subtitle1"><b>@_sections[0].Name</b></MudText>
                <MudSpacer />
            </MudToolBar>
            <MudDropZone T="UserItem" Identifier="@_sections[0].Name" AllowReorder
                Style="height: 60%; display: flex; flex-wrap: wrap; width: 100%;" />
            <MudDivider style="height: 2px; background-color: white; opacity: 0.8;" />
            <MudPaper Elevation="0" Style="height: 40%; background: none; padding-top:30px; overflow-y: auto;">
                @{
                    int i = 0;
                }
                @foreach (var change in _userLocationChanges)
                {
                    @if (i % 2 == 0)
                    {
                        <div class="loglist-item"
                            style="color: white; border: 0px solid white; border-radius: 31px; background: #FFFFFF4D; margin-top:10px; width: 656px; height: 38px; display: flex; align-items: center;">
                            <img src=@change.IconHref width="20px" height="20px" style="margin-left: 19px;" />
                            <p
                                style="font-size: 14px; font-weight: 400; line-height: 20px; height: 100%; margin-bottom: 0px; margin-left: 9px; display:flex; align-items: center;">
                                Uzytkownik @change.UserName został przeniesiony do @change.NewLocation</p>
                        </div>
                    }
                    else
                    {
                        <div class="loglist-item"
                            style="color: white; border: 0px solid white; border-radius: 31px; background: #FFFFFF66; margin-top:10px; width: 656px; height: 38px'">
                            <img src=@change.IconHref width="20px" height="20px" style="color: white;" />
                            <p>Uzytkownik @change.UserName został przeniesiony do @change.NewLocation</p>
                        </div>
                    }
                }
            </MudPaper>

        </MudPaper>
        <div
            style="display: flex; background: radial-gradient(109.64% 235.06% at -11.17% -12.82%, rgba(217, 217, 217, 0.4) 0%, rgba(217, 217, 217, 0) 100%);">
            @foreach (var item in _sections.Skip(1))
            {
                <MudPaper Elevation="0" Width="180px" MinHeight="887px"
                    style="background: none; border: 1px solid grey; border-radius: 4px;" Class="ma-4">
                    <MudToolBar DisableGutters="true" style="align-items: start;">
                        <MudText Typo="Typo.subtitle1"
                            style="border: 1px solid black; width: 100%; background-color: white;">
                            <img src=@item.HrefIcon />
                            <b>@item.Name (@item.UserCount)</b> <!-- Dodaj wyświetlanie liczby użytkowników w grupie -->
                            <b>@item.Name</b>
                        </MudText>
                        <MudSpacer />
                    </MudToolBar>
                    <MudDropZone ItemDraggingClass="pointer-none" T="UserItem" Identifier="@item.Name"
                        Style="height: 100%" />

                </MudPaper>
            }
        </div>

    </ChildContent>
    <ItemRenderer>
        <MudPaper Elevation="25" Class="ma-2"
            Style="width:138px; height:180px; display: flex; flex-direction: column; align-items: center; border-radius: 12px;">
            <div style="padding-left: 8px; width: 100%;"><img src=@context.IconHref width="16px" height="16px" /></div>
            <img src=@context.AvatarHref width="66px" height="66px" />
            <p style="max-width: 68px; line-height: 20px; height: 53px; text-align: center; font-size: 14px; ">
                @context.Name</p>

            @if (@context.CurrentItemInLocation % 2 == 0)
            {
                <div
                    style="background-color: #32293F; padding-top: 4px; border-top: 1px solid black; text-align: center; width: 100%; height: 35px; border-bottom-left-radius: 12px;  border-bottom-right-radius: 12px;">
                    @context.City</div>
            } else {
                <div
                    style="color: white; padding-top: 4px; background-color: #6BC79D; border-top: 1px solid #6BC79D; text-align: center; width: 100%; height: 35px; border-bottom-left-radius: 12px;  border-bottom-right-radius: 12px;">
                    @context.City</div>
            }
        </MudPaper>
    </ItemRenderer>
</MudDropContainer>



@code {
    private MudDropContainer<UserItem> _dropContainer;

    private string currentGroup = "Group 1";
    private List<UserLocationChange> _userLocationChanges = new List<UserLocationChange>();

    private bool _addSectionOpen;

    private void UserUpdated(MudItemDropInfo<UserItem> info)
    {
        var user = info.Item;
        var previousLocation = user.Status;
        var newLocation = info.DropzoneIdentifier;
        var city = user.City;
        var href = GetAvatarHrefFromDropzoneIdentifier(info.DropzoneIdentifier);

        user.Status = newLocation;
        user.IconHref = href;


        _userLocationChanges.Add(new UserLocationChange
            {
                UserName = user.Name,
                PreviousLocation = previousLocation,
                NewLocation = newLocation,
                IconHref = href,
            });

        var group = _sections.FirstOrDefault(g => g.Name == newLocation);
        if (group != null)
        {
            group.UserCount++;
        }

        var previousGroup = _sections.FirstOrDefault(g => g.Name == previousLocation);
        if (previousGroup != null)
        {
            previousGroup.UserCount--;
        }

        var itemsInNewLocation = GetItemsInLocation(newLocation);
        int index = itemsInNewLocation.FindIndex(item => item.Name == user.Name);

        if (index != null)
        {
            user.CurrentItemInLocation = index;
        }
    }
    public List<UserItem> GetItemsInLocation(string location)
    {
        var itemsInLocation = new List<UserItem>();

        foreach (var item in _users)
        {
            if (item.Status == location)
            {
                itemsInLocation.Add(item);
            }
        }

        return itemsInLocation;
    }

    private string GetAvatarHrefFromDropzoneIdentifier(string dropzoneIdentifier)
    {
        if (dropzoneIdentifier == "Group 1")
        {
            return "img/group1.svg"; // Przykładowy href dla grupy 1
        }
        else if (dropzoneIdentifier == "Group 2")
        {
            return "img/group2.svg"; // Przykładowy href dla grupy 2
        }
        else if (dropzoneIdentifier == "Group 3")
        {
            return "img/group3.svg"; // Przykładowy href dla grupy 3
        }
        else if (dropzoneIdentifier == "Group 4")
        {
            return "img/group4.svg"; // Przykładowy href dla grupy 4
        }
        else if (dropzoneIdentifier == "Group 5")
        {
            return "img/group5.svg"; // Przykładowy href dla grupy 5
        }
        else if (dropzoneIdentifier == "Users")
        {
            return "img/group_users.svg"; // Przykładowy href dla grupy Users
        }
        else
        {
            return "img/group_users.svg"; // Domyślny href
        }
    }
    private List<Groups> _sections = new()
{
new Groups("Users", null, 4),
new Groups("Group 1", "img/group1.svg",0),
new Groups("Group 2","img/group2.svg",0),
new Groups("Group 3","img/group3.svg", 0),
new Groups("Group 4","img/group4.svg",0 ),
new Groups("Group 5", "img/group5.svg", 0),

};
    public class Groups
    {
        public string Name { get; init; }
        public string HrefIcon { get; set; }

        public int UserCount { get; set; }
        public Groups(string name, string hrefIcon, int count)
        {
            Name = name;
            HrefIcon = hrefIcon;
            UserCount = count;
        }
    }

    public class UserItem
    {
        public string Name { get; init; }
        public string Status { get; set; }
        public string City { get; set; }
        public string IconHref { get; set; }
        public string AvatarHref { get; set; }
        public int CurrentItemInLocation { get; set; }

        public UserItem(string name, string status, string city, string iconHref, string avatarHref, int position)
        {
            Name = name;
            Status = status;
            City = city;
            IconHref = iconHref;
            AvatarHref = avatarHref;
            CurrentItemInLocation = position;
        }
    }

    private List<UserItem> _users = new(){
new UserItem("Adam Kowalski", "Users", "Warszawa", "img/group_users.svg", "img/user1.png", 0),
new UserItem("Piotr Piotrowski", "Users", "Radom", "img/group_users.svg", "img/user2.png", 1),
new UserItem("Magda Nowakowska", "Users", "Warszawa", "img/group_users.svg", "img/user3.png", 2),
new UserItem("Jan Nowak", "Users", "Warszawa", "img/group_users.svg", "img/user4.png", 3),

};
    // LOG
    protected override async void OnInitialized()
    {
        await JS.InvokeVoidAsync("console.log", currentGroup);
    }
}